// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: inbd/v1/inbd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InbServiceClient is the client API for InbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InbServiceClient interface {
	UpdateSystemSoftware(ctx context.Context, in *UpdateSystemSoftwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateOSSource(ctx context.Context, in *UpdateOSSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	AddApplicationSource(ctx context.Context, in *AddApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	RemoveApplicationSource(ctx context.Context, in *RemoveApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	LoadConfig(ctx context.Context, in *LoadConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	AppendConfig(ctx context.Context, in *AppendConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	RemoveConfig(ctx context.Context, in *RemoveConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	UpdateFirmware(ctx context.Context, in *UpdateFirmwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	SetPowerState(ctx context.Context, in *SetPowerStateRequest, opts ...grpc.CallOption) (*SetPowerStateResponse, error)
}

type inbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInbServiceClient(cc grpc.ClientConnInterface) InbServiceClient {
	return &inbServiceClient{cc}
}

func (c *inbServiceClient) UpdateSystemSoftware(ctx context.Context, in *UpdateSystemSoftwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/UpdateSystemSoftware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) UpdateOSSource(ctx context.Context, in *UpdateOSSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/UpdateOSSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) AddApplicationSource(ctx context.Context, in *AddApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/AddApplicationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) RemoveApplicationSource(ctx context.Context, in *RemoveApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/RemoveApplicationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) LoadConfig(ctx context.Context, in *LoadConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/LoadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) AppendConfig(ctx context.Context, in *AppendConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/AppendConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) RemoveConfig(ctx context.Context, in *RemoveConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/RemoveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) UpdateFirmware(ctx context.Context, in *UpdateFirmwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/UpdateFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) SetPowerState(ctx context.Context, in *SetPowerStateRequest, opts ...grpc.CallOption) (*SetPowerStateResponse, error) {
	out := new(SetPowerStateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/SetPowerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InbServiceServer is the server API for InbService service.
// All implementations must embed UnimplementedInbServiceServer
// for forward compatibility
type InbServiceServer interface {
	UpdateSystemSoftware(context.Context, *UpdateSystemSoftwareRequest) (*UpdateResponse, error)
	UpdateOSSource(context.Context, *UpdateOSSourceRequest) (*UpdateResponse, error)
	AddApplicationSource(context.Context, *AddApplicationSourceRequest) (*UpdateResponse, error)
	RemoveApplicationSource(context.Context, *RemoveApplicationSourceRequest) (*UpdateResponse, error)
	LoadConfig(context.Context, *LoadConfigRequest) (*ConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*ConfigResponse, error)
	AppendConfig(context.Context, *AppendConfigRequest) (*ConfigResponse, error)
	RemoveConfig(context.Context, *RemoveConfigRequest) (*ConfigResponse, error)
	UpdateFirmware(context.Context, *UpdateFirmwareRequest) (*UpdateResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	SetPowerState(context.Context, *SetPowerStateRequest) (*SetPowerStateResponse, error)
	mustEmbedUnimplementedInbServiceServer()
}

// UnimplementedInbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInbServiceServer struct {
}

func (UnimplementedInbServiceServer) UpdateSystemSoftware(context.Context, *UpdateSystemSoftwareRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemSoftware not implemented")
}
func (UnimplementedInbServiceServer) UpdateOSSource(context.Context, *UpdateOSSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOSSource not implemented")
}
func (UnimplementedInbServiceServer) AddApplicationSource(context.Context, *AddApplicationSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplicationSource not implemented")
}
func (UnimplementedInbServiceServer) RemoveApplicationSource(context.Context, *RemoveApplicationSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApplicationSource not implemented")
}
func (UnimplementedInbServiceServer) LoadConfig(context.Context, *LoadConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadConfig not implemented")
}
func (UnimplementedInbServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedInbServiceServer) SetConfig(context.Context, *SetConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedInbServiceServer) AppendConfig(context.Context, *AppendConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendConfig not implemented")
}
func (UnimplementedInbServiceServer) RemoveConfig(context.Context, *RemoveConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConfig not implemented")
}
func (UnimplementedInbServiceServer) UpdateFirmware(context.Context, *UpdateFirmwareRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}
func (UnimplementedInbServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedInbServiceServer) SetPowerState(context.Context, *SetPowerStateRequest) (*SetPowerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPowerState not implemented")
}
func (UnimplementedInbServiceServer) mustEmbedUnimplementedInbServiceServer() {}

// UnsafeInbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InbServiceServer will
// result in compilation errors.
type UnsafeInbServiceServer interface {
	mustEmbedUnimplementedInbServiceServer()
}

func RegisterInbServiceServer(s grpc.ServiceRegistrar, srv InbServiceServer) {
	s.RegisterService(&InbService_ServiceDesc, srv)
}

func _InbService_UpdateSystemSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).UpdateSystemSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/UpdateSystemSoftware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).UpdateSystemSoftware(ctx, req.(*UpdateSystemSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_UpdateOSSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOSSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).UpdateOSSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/UpdateOSSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).UpdateOSSource(ctx, req.(*UpdateOSSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_AddApplicationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).AddApplicationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/AddApplicationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).AddApplicationSource(ctx, req.(*AddApplicationSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_RemoveApplicationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).RemoveApplicationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/RemoveApplicationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).RemoveApplicationSource(ctx, req.(*RemoveApplicationSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_LoadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).LoadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/LoadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).LoadConfig(ctx, req.(*LoadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_AppendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).AppendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/AppendConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).AppendConfig(ctx, req.(*AppendConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_RemoveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).RemoveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/RemoveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).RemoveConfig(ctx, req.(*RemoveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_UpdateFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).UpdateFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/UpdateFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).UpdateFirmware(ctx, req.(*UpdateFirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_SetPowerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPowerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).SetPowerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/SetPowerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).SetPowerState(ctx, req.(*SetPowerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InbService_ServiceDesc is the grpc.ServiceDesc for InbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inbd.v1.InbService",
	HandlerType: (*InbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateSystemSoftware",
			Handler:    _InbService_UpdateSystemSoftware_Handler,
		},
		{
			MethodName: "UpdateOSSource",
			Handler:    _InbService_UpdateOSSource_Handler,
		},
		{
			MethodName: "AddApplicationSource",
			Handler:    _InbService_AddApplicationSource_Handler,
		},
		{
			MethodName: "RemoveApplicationSource",
			Handler:    _InbService_RemoveApplicationSource_Handler,
		},
		{
			MethodName: "LoadConfig",
			Handler:    _InbService_LoadConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _InbService_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _InbService_SetConfig_Handler,
		},
		{
			MethodName: "AppendConfig",
			Handler:    _InbService_AppendConfig_Handler,
		},
		{
			MethodName: "RemoveConfig",
			Handler:    _InbService_RemoveConfig_Handler,
		},
		{
			MethodName: "UpdateFirmware",
			Handler:    _InbService_UpdateFirmware_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _InbService_Query_Handler,
		},
		{
			MethodName: "SetPowerState",
			Handler:    _InbService_SetPowerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inbd/v1/inbd.proto",
}
