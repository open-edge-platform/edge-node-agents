syntax = "proto3";

package inbd.v1;

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/intel/intel-inb-manageability/pkg/api/inbd/v1";

service InbService {
  rpc UpdateSystemSoftware(UpdateSystemSoftwareRequest) returns (UpdateResponse);
  rpc UpdateOSSource(UpdateOSSourceRequest) returns (UpdateResponse);
  rpc AddApplicationSource(AddApplicationSourceRequest) returns (UpdateResponse);
  rpc RemoveApplicationSource(RemoveApplicationSourceRequest) returns (UpdateResponse);
  rpc LoadConfig(LoadConfigRequest) returns (ConfigResponse);
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
  rpc SetConfig(SetConfigRequest) returns (ConfigResponse);
  rpc AppendConfig(AppendConfigRequest) returns (ConfigResponse);
  rpc RemoveConfig(RemoveConfigRequest) returns (ConfigResponse);
  rpc UpdateFirmware(UpdateFirmwareRequest) returns (UpdateResponse);
  rpc Query(QueryRequest) returns (QueryResponse);
}

message UpdateFirmwareRequest {
  string url = 1 [(buf.validate.field).cel = {
    id: "valid_url"
    message: "url must be a valid URL."
    expression: "this == '' || this.isUri()"
  },
  (buf.validate.field).required = true]; // URL from which to remotely retrieve the package
  google.protobuf.Timestamp release_date = 2 [(buf.validate.field).required = true]; // Release date of the new firmware update.
  string tool_options = 3 [(buf.validate.field).required = false]; // Options for the firmware update tool
  bool do_not_reboot = 4;  // Whether to reboot the node after the firmware update attempt
  string username = 5 [(buf.validate.field).required = false]; // Username if authentication is required for the package source
  string signature = 6 [(buf.validate.field).required = false]; // Signature of the package
}

message UpdateSystemSoftwareRequest {
  string url = 1 [(buf.validate.field).cel = {
    id: "valid_url"
    message: "url must be a valid URL."
    expression: "this == '' || this.isUri()"
  },
  (buf.validate.field).required = false]; // URL from which to remotely retrieve the package
  google.protobuf.Timestamp release_date = 2 [(buf.validate.field).required = false]; // Release date of the new SW update.
  enum DownloadMode {
      DOWNLOAD_MODE_UNSPECIFIED = 0;
      DOWNLOAD_MODE_FULL = 1; // Both download the package and install the package
      DOWNLOAD_MODE_NO_DOWNLOAD = 2; // Do not download the package.  Only install.
      DOWNLOAD_MODE_DOWNLOAD_ONLY = 3; // Only download the package.  Do not install.
  }
  DownloadMode mode = 3 [
      (buf.validate.field).enum = {
          defined_only: true
      },
  (buf.validate.field).required = true]; // Mode for installing the software update regarding download and install steps.
  bool do_not_reboot = 4;  // Whether to reboot the node after the software update attempt
  repeated string package_list = 5 [(buf.validate.field).repeated = {
      unique: true,
      items: {
          string: {
              pattern: "^[a-zA-Z0-9_-]+$" // Adjust the pattern as needed
          }
      }
  }]; // List of packages to install if whole package update isn't desired.
  string signature = 6 [(buf.validate.field).required = false]; // Signature of the package
}

message UpdateOSSourceRequest {
  repeated string source_list = 1 [(buf.validate.field).repeated = {
      unique: true,
      items: {
          string: {
              pattern: "^[a-zA-Z0-9_-]+$:/" // Adjust the pattern as needed
              min_len: 1
              max_len: 500
          }
      }
  }]; // List of sources to update.
}

message AddApplicationSourceRequest {
  repeated string source = 1 [(buf.validate.field).repeated = {
    unique: true,
    items: {
        string: {
            pattern: "^[a-zA-Z0-9_-]+$:/" // Adjust the pattern as needed
            min_len: 1
            max_len: 500
        }
    }
  }];
  string filename = 2 [(buf.validate.field).required = true];
  string gpg_key_uri = 3 [(buf.validate.field).cel = {
    id: "valid_uri"
    message: "url must be a valid URL."
    expression: "this == '' || this.isUri()"
  },
  (buf.validate.field).required = false]; // URL from which to remotely retrieve the package
  string gpg_key_name = 4 [(buf.validate.field).required = false];
}

message RemoveApplicationSourceRequest {
  string filename = 1 [(buf.validate.field).required = true];
  string gpg_key_name = 2 [(buf.validate.field).required = false];
}

message UpdateResponse {
  int32 status_code = 1; // Status code of the operation
  string error = 2; // set if there is an error
}

message LoadConfigRequest {
  string uri = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_uri"
      message: "uri must be a valid URL."
      expression: "this != '' && this.isUri()"
    }
  ];
  string signature = 2 [(buf.validate.field).required = false];
}

message GetConfigRequest {
  string path = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_path"
      message: "path must not be empty."
      expression: "this != ''"
    }
  ];
}

message SetConfigRequest {
  string path = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_path"
      message: "path must not be empty."
      expression: "this != ''"
    }
  ];
}

message AppendConfigRequest {
  string path = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_path"
      message: "path must not be empty."
      expression: "this != ''"
    }
  ];
}

message RemoveConfigRequest {
  string path = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "valid_path"
      message: "path must not be empty."
      expression: "this != ''"
    }
  ];
}

message ConfigResponse {
  int32 status_code = 1; // Status code of the operation
  string error = 2;      // set if there is an error
  bool success = 3;
  string message = 4;
}

message GetConfigResponse {
  int32 status_code = 1;
  string error = 2;
  bool success = 3;
  string value = 4;
  string message = 5;
}

message QueryRequest {
  QueryOption option = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]
    }
  ];
}

enum QueryOption {
  QUERY_OPTION_UNSPECIFIED = 0;
  QUERY_OPTION_HARDWARE = 1;    // hw - Hardware information
  QUERY_OPTION_FIRMWARE = 2;    // fw - Firmware information
  QUERY_OPTION_OS = 3;          // os - Operating System information
  QUERY_OPTION_SWBOM = 4;       // swbom - Software BOM information
  QUERY_OPTION_VERSION = 5;     // version - Version information
  QUERY_OPTION_ALL = 6;         // all - All available information
}

message QueryResponse {
  int32 status_code = 1;                    // HTTP-style status code
  string error = 2;                         // Error message if any
  bool success = 3;                         // Success indicator
  QueryData data = 4;                       // Query result data
}

message QueryData {
  google.protobuf.Timestamp timestamp = 1; // Timestamp when data was collected
  string type = 2;                          // Type of telemetry data
  oneof values {
    HardwareInfo hardware = 3;              // Hardware information
    FirmwareInfo firmware = 4;              // Firmware information
    OSInfo os_info = 5;                     // Operating system information
    SWBOMInfo swbom = 6;                    // Software BOM information
    VersionInfo version = 7;                // Version information
    AllInfo all_info = 8;                   // All information combined
  }
}

// Hardware information structure
message HardwareInfo {
  string manufacturer = 1;                  // Hardware manufacturer
  string product = 2;                       // Product type
  string stepping = 3;                      // Stepping
  string sku = 4;                          // SKU
  string model = 5;                        // Model number
  string serial_sum = 6;                   // Serial number
  string system_manufacturer = 7;          // System manufacturer
  string system_product_name = 8;          // System product name
  string cpu_id = 9;                       // CPU identifier
  string total_physical_memory = 10;       // Total physical memory
  string disk_information = 11;            // Disk information
}

// Firmware information structure
message FirmwareInfo {
  google.protobuf.Timestamp boot_fw_date = 1; // Firmware date
  string boot_fw_vendor = 2;                  // Firmware vendor
  string boot_fw_version = 3;                 // Firmware version
  string bios_vendor = 4;                     // BIOS vendor
  string bios_version = 5;                    // BIOS version
  google.protobuf.Timestamp bios_release_date = 6; // BIOS release date
}

// Operating system information structure
message OSInfo {
  string os_type = 1;                       // Operating System type
  string os_version = 2;                    // Operating System version
  google.protobuf.Timestamp os_release_date = 3; // Operating System release date
  string os_information = 4;                // Additional OS information
}

// Software BOM information structure
message SWBOMInfo {
  repeated SoftwarePackage packages = 1;    // List of installed software packages
  google.protobuf.Timestamp collection_timestamp = 2; // When SWBOM was collected
  string collection_method = 3;             // How SWBOM was collected
}

message SoftwarePackage {
  string name = 1;                          // Package name
  string version = 2;                       // Package version
  string vendor = 3;                        // Package vendor/publisher
  google.protobuf.Timestamp install_date = 4; // Installation date
  string license = 5;                       // License information
  string description = 6;                   // Package description
}

// Version information structure
message VersionInfo {
  string version = 1;                       // Version number
  string inbm_version_commit = 2;           // INBM version commit
  google.protobuf.Timestamp build_date = 3; // Build date
  string git_commit = 4;                    // Git commit hash
}

// Combined information structure (for "all" queries)
message AllInfo {
  HardwareInfo hardware = 1;               // Hardware information
  FirmwareInfo firmware = 2;               // Firmware information
  OSInfo os_info = 3;                      // OS information
  VersionInfo version = 4;                 // Version information
  string power_capabilities = 5;           // Power capabilities (Linux only)
  repeated string additional_info = 6;     // Any additional system information
}
