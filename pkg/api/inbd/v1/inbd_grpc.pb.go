// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: inbd/v1/inbd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InbServiceClient is the client API for InbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InbServiceClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	UpdateSystemSoftware(ctx context.Context, in *UpdateSystemSoftwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateOSSource(ctx context.Context, in *UpdateOSSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	AddApplicationSource(ctx context.Context, in *AddApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	RemoveApplicationSource(ctx context.Context, in *RemoveApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type inbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInbServiceClient(cc grpc.ClientConnInterface) InbServiceClient {
	return &inbServiceClient{cc}
}

func (c *inbServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) UpdateSystemSoftware(ctx context.Context, in *UpdateSystemSoftwareRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/UpdateSystemSoftware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) UpdateOSSource(ctx context.Context, in *UpdateOSSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/UpdateOSSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) AddApplicationSource(ctx context.Context, in *AddApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/AddApplicationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inbServiceClient) RemoveApplicationSource(ctx context.Context, in *RemoveApplicationSourceRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/inbd.v1.InbService/RemoveApplicationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InbServiceServer is the server API for InbService service.
// All implementations must embed UnimplementedInbServiceServer
// for forward compatibility
type InbServiceServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	UpdateSystemSoftware(context.Context, *UpdateSystemSoftwareRequest) (*UpdateResponse, error)
	UpdateOSSource(context.Context, *UpdateOSSourceRequest) (*UpdateResponse, error)
	AddApplicationSource(context.Context, *AddApplicationSourceRequest) (*UpdateResponse, error)
	RemoveApplicationSource(context.Context, *RemoveApplicationSourceRequest) (*UpdateResponse, error)
	mustEmbedUnimplementedInbServiceServer()
}

// UnimplementedInbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInbServiceServer struct {
}

func (UnimplementedInbServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedInbServiceServer) UpdateSystemSoftware(context.Context, *UpdateSystemSoftwareRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemSoftware not implemented")
}
func (UnimplementedInbServiceServer) UpdateOSSource(context.Context, *UpdateOSSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOSSource not implemented")
}
func (UnimplementedInbServiceServer) AddApplicationSource(context.Context, *AddApplicationSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplicationSource not implemented")
}
func (UnimplementedInbServiceServer) RemoveApplicationSource(context.Context, *RemoveApplicationSourceRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApplicationSource not implemented")
}
func (UnimplementedInbServiceServer) mustEmbedUnimplementedInbServiceServer() {}

// UnsafeInbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InbServiceServer will
// result in compilation errors.
type UnsafeInbServiceServer interface {
	mustEmbedUnimplementedInbServiceServer()
}

func RegisterInbServiceServer(s grpc.ServiceRegistrar, srv InbServiceServer) {
	s.RegisterService(&InbService_ServiceDesc, srv)
}

func _InbService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_UpdateSystemSoftware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemSoftwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).UpdateSystemSoftware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/UpdateSystemSoftware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).UpdateSystemSoftware(ctx, req.(*UpdateSystemSoftwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_UpdateOSSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOSSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).UpdateOSSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/UpdateOSSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).UpdateOSSource(ctx, req.(*UpdateOSSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_AddApplicationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).AddApplicationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/AddApplicationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).AddApplicationSource(ctx, req.(*AddApplicationSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InbService_RemoveApplicationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveApplicationSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InbServiceServer).RemoveApplicationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inbd.v1.InbService/RemoveApplicationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InbServiceServer).RemoveApplicationSource(ctx, req.(*RemoveApplicationSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InbService_ServiceDesc is the grpc.ServiceDesc for InbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inbd.v1.InbService",
	HandlerType: (*InbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _InbService_GetVersion_Handler,
		},
		{
			MethodName: "UpdateSystemSoftware",
			Handler:    _InbService_UpdateSystemSoftware_Handler,
		},
		{
			MethodName: "UpdateOSSource",
			Handler:    _InbService_UpdateOSSource_Handler,
		},
		{
			MethodName: "AddApplicationSource",
			Handler:    _InbService_AddApplicationSource_Handler,
		},
		{
			MethodName: "RemoveApplicationSource",
			Handler:    _InbService_RemoveApplicationSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inbd/v1/inbd.proto",
}
