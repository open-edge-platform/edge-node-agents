---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
name: Pre-Merge CI Pipeline
on:
  workflow_call:
    inputs:
      runner_version:
        description: "Runner version to use"
        required: true
        default: "ubuntu-24.04"
        type: string
      run_security_scans:
        description: "Run security scans"
        required: false
        default: true
        type: boolean
      run_version_check:
        description: "Run version check"
        required: false
        default: true
        type: boolean
      run_reuse_check:
        description: "Header license scan with reuse"
        required: false
        default: true
        type: boolean
      run_build:
        description: "Run build"
        required: true
        default: true
        type: boolean
      run_lint:
        description: "Run lint"
        required: false
        default: true
        type: boolean
      run_test:
        description: "Run test"
        required: false
        default: true
        type: boolean
      run_integration_test:
        description: "Run integration test"
        required: false
        default: true
        type: boolean
      run_fuzz_test:
        description: "Run fuzz test"
        required: false
        default: true
        type: boolean
      run_package_build:
        description: "Build agent package"
        required: true
        default: true
        type: boolean
      run_package_test:
        description: "Run package test"
        required: false
        default: true
        type: boolean
      run_shellcheck_common:
        description: "Run shellcheck on common scripts"
        required: false
        default: true
        type: boolean
      run_shellcheck_agent:
        description: "Run shellcheck on agent scripts"
        required: false
        default: true
        type: boolean
      prefix_tag_separator:
        description: "If provided, the tag will be prefixed input.project_folder with this separator"
        required: false
        default: ""
        type: string
      project_folder:
        description: "Project subfolder where the job will run, defaults to ."
        required: false
        default: "."
        type: string
      cache_go:
        description: >-
          "Should Go-related cache for project be saved/restored."
        required: false
        default: false
        type: boolean
      remove_cache_go:
        description: >-
          "Should Go-related cache for project be removed when not needed anymore."
        required: false
        default: false
        type: boolean
jobs:
  run-repo-pipelines:
    runs-on: ${{ inputs.runner_version }}
    env:
      GIT_SHORT_URL: ${{ github.repository }}
      PROJECT_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history, WO sporadic issue with missing tags
          fetch-tags: true # Fetch tags
          ref: ${{ github.head_ref }} # Checkout the branch that triggered the workflow to avoid detached HEAD

      - name: REUSE Compliance Check
        if: ${{ inputs.run_reuse_check == true }}
        uses: fsfe/reuse-action@bb774aa972c2a89ff34781233d275075cbddf542  # v5.0.0

      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Sanitize project folder
        run: |
          SANITIZED_REPORT_PATH=$(echo "${{ inputs.project_folder }}" | tr '/' '-')
          echo "SANITIZED_REPORT_PATH=${SANITIZED_REPORT_PATH}" >> $GITHUB_ENV

      - name: Run ClamAV Scan
        if: ${{ inputs.run_security_scans }}
        uses: open-edge-platform/orch-ci/.github/actions/clamav@40d61a820157bc9b70d3f2bdc5aec786073d48f2
        with:
          report-path: clamav_scan_report-${{ inputs.project_folder }}.txt
          project-folder: ${{ inputs.project_folder }}

      - name: Upload ClamAV Scan Report
        if: ${{ inputs.run_security_scans }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ env.CLAMAV_ARTIFACT_NAME }}
          path: ${{ env.SANITIZED_CLAMAV_REPORT_PATH }}

      - name: Run Trivy Filesystem Scan
        if: ${{ inputs.run_security_scans }}
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # v0.30.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'table'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          scanners: 'vuln,misconfig,secret'
          output: "trivy_scan_report-${{ env.SANITIZED_REPORT_PATH }}.txt"

      - name: Upload Trivy Scan Report
        if: ${{ inputs.run_security_scans }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ env.SANITIZED_REPORT_PATH }}
          path: trivy_scan_report-${{ env.SANITIZED_REPORT_PATH }}.txt

      - name: Make sure directories where the cache will be restored exist and are empty
        if: ${{ inputs.cache_go }}
        run: |
          # Some caches from previous steps/jobs might be left, clean them up to avoid
          # "Cannot open: File exists" errors
          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"
          mkdir -p "${GOCACHE}" "${GOMODCACHE}" ~/.cache/golangci-lint
          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint
          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true
          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint
          echo "GOCACHE=$GOCACHE" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$GOMODCACHE" >> "$GITHUB_ENV"

      - name: Setup CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Restore Go cache
        if: ${{ inputs.cache_go }}
        id: restored-project-go-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ env.REPO_PROJECT }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ env.REPO_PROJECT }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-
            ${{ env.REPO_PROJECT }}-${{ runner.os }}-go-

      - name: Version Check
        if: ${{ inputs.run_version_check == true }}
        env:
          BASEDIR: ${{ inputs.project_folder }}
        run: |
          if [ -n "${{ inputs.prefix_tag_separator }}" ]; then
            ./ci/scripts/version-check.sh "${{ inputs.project_folder }}${{ inputs.prefix_tag_separator }}"
          else
            ./ci/scripts/version-check.sh
          fi

      - name: Build Code
        if: ${{ (inputs.run_build == true) && (inputs.project_folder != 'common') && (inputs.project_folder != 'platform-observability-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          echo "Building the code"
          make build

      - name: Lint Code
        if: ${{ (inputs.run_lint == true) && (inputs.project_folder != 'platform-observability-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make lint

      - name: Test Code
        if: ${{ (inputs.run_test == true) && (inputs.project_folder != 'platform-observability-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make unit-test

      - name: Cert setup for integration tests
        if: ${{ (inputs.project_folder == 'cluster-agent') || (inputs.project_folder == 'hardware-discovery-agent') || (inputs.project_folder == 'node-agent') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          sudo cp test/_dummy.crt /usr/local/share/ca-certificates/_dummy.crt
          sudo update-ca-certificates

      - name: Integration test
        if: ${{ (inputs.run_integration_test == true) && (inputs.project_folder != 'common') && (inputs.project_folder != 'platform-observability-agent') && (inputs.project_folder != 'platform-update-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make integration_test

      - name: Fuzz test
        if: ${{ (inputs.run_integration_test == true) && (inputs.project_folder != 'common') && (inputs.project_folder != 'platform-observability-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make fuzztest

      - name: INBM dependency download
        if: ${{ inputs.project_folder == 'platform-update-agent' }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make inbmdownload

      - name: POA dependency download
        if: ${{ inputs.project_folder == 'platform-observability-agent' }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          sudo make package_depends
          make download_deps

      - name: Build Package
        if: ${{ (inputs.run_package_build == true) && (inputs.project_folder != 'common') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          echo "Building the package"
          make package

      - name: POA dependency clean up
        if: ${{ inputs.project_folder == 'platform-observability-agent' }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          rm -rf assets

      - name: Apt update
        if: ${{ inputs.project_folder == 'platform-observability-agent' }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          sudo apt update

      - name: Package test
        if: ${{ (inputs.run_package_test == true) && (inputs.project_folder != 'common') && (inputs.project_folder != 'platform-update-agent') && (inputs.project_folder != '') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          #make package_test
          echo "Test package"

      - name: Shellcheck common scripts
        if: ${{ (inputs.run_shellcheck_common == true) && (inputs.project_folder == 'common') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          find . -type f -name *.sh -exec "shellcheck" "-e" "SC2010,SC2086" {} +

      - name: Shellcheck agent scripts
        if: ${{ (inputs.run_shellcheck_agent == true) && (inputs.project_folder == 'platform-observability-agent') }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          find scripts/ -type f -name *.sh -exec "shellcheck" {} +

      - name: Send failure email
        if: ${{ failure() }}
        run: |
          echo "Sending failure email..."
