---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Post-Merge CI Pipeline

on:
  push:
    branches:
      - main
      - release-*
  workflow_dispatch:

permissions: {}

jobs:
  pre-checks:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
      manifest: ${{ contains(steps.check-files.outputs.changed_files, 'ena-manifest.yaml') }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        env:
          changed_projects: ${{ steps.discover-changes.outputs.changed_projects }}
        run: |
          folders_to_remove='[".github",".reuse","LICENSES"]'

          filtered_projects=$(echo "$changed_projects" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          echo "filtered_projects=${filtered_projects}" >> ${GITHUB_OUTPUT}

      - name: Discover Changed Files
        id: check-files
        uses: open-edge-platform/orch-ci/discover-changed-files@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          project_folder: "."
  post-merge-pipeline:
    permissions:
      contents: read
      security-events: write
      id-token: write
    needs: pre-checks
    if: ${{ needs.pre-checks.outputs.filtered_projects != '[]' && needs.pre-checks.outputs.filtered_projects != '[""]' }}
    strategy:
      fail-fast: false
      matrix:
        #runner_version: [ubuntu-24.04, ubuntu-22.04]
        project_folder: ${{ fromJson(needs.pre-checks.outputs.filtered_projects) }}
    uses: open-edge-platform/orch-ci/.github/workflows/post-merge.yml@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
    with:
    #  runner_version: ${{ matrix.runner_version }}
      runs_on: ubuntu-22.04
      run_build: true
      run_lint: true
      run_test: true
      run_package_build: true
      run_deb_push: true
      run_version_tag: true
      run_version_dev: true
      prefix_tag_separator: "/"
      project_folder: ${{ matrix.project_folder }}
      remove_cache_go: true
      cache_go: true
      bootstrap_tools: "all,golangci-lint2"
    secrets:
      SYS_ORCH_GITHUB: ${{ secrets.SYS_ORCH_GITHUB }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      NO_AUTH_ECR_PUSH_USERNAME: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
      NO_AUTH_ECR_PUSH_PASSWD: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
      MSTEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
  push-manifest:
    permissions:
      contents: read
      security-events: write
      id-token: write
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - post-merge-pipeline
    if: ${{ always() && needs.pre-checks.outputs.manifest == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Fetch all history, WO sporadic issue with missing tags
          fetch-tags: true # Fetch tags
          ref: ${{ github.head_ref }} # Checkout the branch that triggered the workflow to avoid detached HEAD
          persist-credentials: false

      - name: Checkout action repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "yq,aws,oras"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-access-key-id: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
          aws-secret-access-key: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          registries: "080137407410"

      - name: Push manifest
        shell: bash
        env:
          REGISTRY: 080137407410.dkr.ecr.us-west-2.amazonaws.com
          REPOSITORY: edge-orch/en/files/ena-manifest
          MANIFEST: ena-manifest.yaml
        run: |
          version=$(yq '.metadata.release' ${MANIFEST})
          if [[ "$version" =~ .*-dev ]]; then
              version=${version}-$(git rev-parse --short HEAD)
              yq -i ".metadata.release = \"${version}\"" ${MANIFEST}
          fi

          aws ecr create-repository --region us-west-2 --repository-name ${REPOSITORY} || true
          oras push --artifact-type application/vnd.intel.orch.en \
            ${REGISTRY}/${REPOSITORY}:${GITHUB_REF_NAME},${version} ${MANIFEST}

      - name: Tag new manifest version
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
        run: |
          ./common/ci_scripts/manifest-versioning.sh tag
  collect-versions:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - post-merge-pipeline
      - push-manifest
    outputs:
      manifest_version: ${{ steps.manifest-version.outputs.version }}
      cluster_agent_version: ${{ steps.agent-versions.outputs.cluster_agent }}
      hardware_discovery_agent_version: ${{ steps.agent-versions.outputs.hardware_discovery_agent }}
      node_agent_version: ${{ steps.agent-versions.outputs.node_agent }}
      platform_manageability_agent_version: ${{ steps.agent-versions.outputs.platform_manageability_agent }}
      platform_observability_agent_version: ${{ steps.agent-versions.outputs.platform_observability_agent }}
      platform_telemetry_agent_version: ${{ steps.agent-versions.outputs.platform_telemetry_agent }}
      platform_update_agent_version: ${{ steps.agent-versions.outputs.platform_update_agent }}
      inbm_version: ${{ steps.inbm-version.outputs.inbm_version }}
      caddy_version: ${{ steps.caddy-version.outputs.caddy_version }}
    if: ${{ always() && needs.pre-checks.outputs.manifest == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Fetch all history, WO sporadic issue with missing tags
          fetch-tags: true # Fetch tags
          ref: ${{ github.head_ref }} # Checkout the branch that triggered the workflow to avoid detached HEAD
          persist-credentials: false

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base,yq"

      - name: Get manifest version
        id: manifest-version
        shell: bash
        run: |
          echo "version=$(yq '.metadata.release' ena-manifest.yaml)" >> ${GITHUB_OUTPUT}

      - name: Get agent versions
        id: agent-versions
        shell: bash
        run: |
          echo "cluster_agent=$(head -n1 cluster-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "hardware_discovery_agent=$(head -n1 hardware-discovery-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "node_agent=$(head -n1 node-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_manageability_agent=$(head -n1 platform-manageability-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_observability_agent=$(head -n1 platform-observability-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_telemetry_agent=$(head -n1 platform-telemetry-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_update_agent=$(head -n1 platform-update-agent/VERSION)" >> ${GITHUB_OUTPUT}

      - name: Get INBM version
        id: inbm-version
        shell: bash
        run: |
          echo "inbm_version=$(grep 'INBM_VERSION ?' platform-update-agent/Makefile | cut -d '=' -f 2-)" >> ${GITHUB_OUTPUT}

      - name: Get Caddy version
        id: caddy-version
        shell: bash
        run: |
          LINE_NUM=$(grep -n 'name: caddy' ena-manifest.yaml | cut -d ':' -f 1)
          VERSION_LINE_NUM=$((${LINE_NUM}+1))
          echo "caddy_version=$(grep -ne 'version: ' ena-manifest.yaml | grep ${VERSION_LINE_NUM} | cut -d ':' -f 3 | cut -d ' ' -f 2)" >> ${GITHUB_OUTPUT}
  update-manifest-virtual-edge-node:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - post-merge-pipeline
      - push-manifest
      - collect-versions
    if: ${{ always() && needs.pre-checks.outputs.manifest == 'true' }}
    steps:
      - name: Checkout VEN repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: open-edge-platform/virtual-edge-node
          path: virtual-edge-node
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base"

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "Github Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          manifest_version: ${{ needs.collect-versions.outputs.manifest_version }}
        run: |
          if [[ $(echo "${manifest_version}" | grep 'dev') ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            echo "${manifest_version}" > edge-node-container/EN_MANIFEST_VERSION
          fi

      - name: Update cluster-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          cluster_agent_version: ${{ needs.collect-versions.outputs.cluster_agent_version }}
        run: |
          if [[ $(echo "${cluster_agent_version}" | grep 'dev') ]]; then
            echo "Skipping cluster agent version update as no new version created"
          else
            sed -i "s#cluster_agent_version: .*#cluster_agent_version: ${cluster_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  cluster_agent_version: .*#  cluster_agent_version: ${cluster_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update hardware-discovery-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          hardware_discovery_agent_version: ${{ needs.collect-versions.outputs.hardware_discovery_agent_version }}
        run: |
          if [[ $(echo "${hardware_discovery_agent_version}" | grep 'dev') ]]; then
            echo "Skipping hardware discovery agent version update as no new version created"
          else
            sed -i "s#hardware_discovery_agent_version: .*#hardware_discovery_agent_version: ${hardware_discovery_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  hardware_discovery_agent_version: .*#  hardware_discovery_agent_version: ${hardware_discovery_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update node-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          node_agent_version: ${{ needs.collect-versions.outputs.node_agent_version }}
        run: |
          if [[ $(echo "${node_agent_version}" | grep 'dev') ]]; then
            echo "Skipping node agent version update as no new version created"
          else
            sed -i "s#node_agent_version: .*#node_agent_version: ${node_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  node_agent_version: .*#  node_agent_version: ${node_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-manageability-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          platform_manageability_agent_version: ${{ needs.collect-versions.outputs.platform_manageability_agent_version }}
        run: |
          if [[ $(echo "${platform_manageability_agent}" | grep 'dev') ]]; then
            echo "Skipping platform manageability version update as no new version created"
          else
            sed -i "s#platform_manageability_agent_version: .*#platform_manageability_agent_version: ${platform_manageability_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_manageability_agent_version: .*#  platform_manageability_agent_version: ${platform_manageability_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-observability-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          platform_observability_agent_version: ${{ needs.collect-versions.outputs.platform_observability_agent_version }}
        run: |
          if [[ $(echo "${platform_observability_agent_version}" | grep 'dev') ]]; then
            echo "Skipping platform observability agent version update as no new version created"
          else
            sed -i "s#platform_observability_agent_version: .*#platform_observability_agent_version: ${platform_observability_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_observability_agent_version: .*#  platform_observability_agent_version: ${platform_observability_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-telemetry-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          platform_telemetry_agent_version: ${{ needs.collect-versions.outputs.platform_telemetry_agent_version }}
        run: |
          if [[ $(echo "${platform_telemetry_agent_version}" | grep 'dev') ]]; then
            echo "Skipping platform telemetry agent version update as no new version created"
          else
            sed -i "s#platform_telemetry_agent_version: .*#platform_telemetry_agent_version: ${platform_telemetry_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_telemetry_agent_version: .*#  platform_telemetry_agent_version: ${platform_telemetry_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-update-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          platform_update_agent_version: ${{ needs.collect-versions.outputs.platform_update_agent_version }}
        run: |
          if [[ $(echo "${platform_update_agent_version}" | grep 'dev') ]]; then
            echo "Skipping platform update agent version update as no new version created"
          else
            sed -i "s#platform_update_agent_version: .*#platform_update_agent_version: ${platform_update_agent_version}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_update_agent_version: .*#  platform_update_agent_version: ${platform_update_agent_version}#" edge-node-container/chart/values.yaml
          fi

      - name: Update INBM versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          inbm_version: ${{ needs.collect-versions.outputs.inbm_version }}
        run: |
          if [[ $(echo "${inbm_version}" | grep 'dev') ]]; then
            echo "Skipping INBM version update as no new version created"
          else
            sed -i "s#inbc_program_version: .*#inbc_program_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbc_program_version: .*#  inbc_program_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_cloudadapter_agent_version: .*#inbm_cloudadapter_agent_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_cloudadapter_agent_version: .*#  inbm_cloudadapter_agent_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_configuration_agent_version: .*#inbm_configuration_agent_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_configuration_agent_version: .*#  inbm_configuration_agent_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_diagnostic_agent_version: .*#inbm_diagnostic_agent_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_diagnostic_agent_version: .*#  inbm_diagnostic_agent_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_dispatcher_agent_version: .*#inbm_dispatcher_agent_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_dispatcher_agent_version: .*#  inbm_dispatcher_agent_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_telemetry_agent_version: .*#inbm_telemetry_agent_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_telemetry_agent_version: .*#  inbm_telemetry_agent_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#mqtt_version: .*#mqtt_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  mqtt_version: .*#  mqtt_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#tpm_provision_version: .*#tpm_provision_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  tpm_provision_version: .*#  tpm_provision_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
            sed -i "s#trtl_version: .*#trtl_version:${inbm_version}-1#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  trtl_version: .*#  trtl_version:${inbm_version}-1#" edge-node-container/chart/values.yaml
          fi

      - name: Update Caddy versions in chart
        shell: bash
        working-directory: virtual-edge-node
        env:
          caddy_version: ${{ needs.collect-versions.outputs.caddy_version }}
        run: |
          sed -i "s#caddy_version: .*#caddy_version: ${caddy_version}#" edge-node-container/chart/bma_values.yaml
          sed -i "s#  caddy_version: .*#  caddy_version: ${caddy_version}#" edge-node-container/chart/values.yaml

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: virtual-edge-node
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          GH_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

          check_changed_files=$(git status -s)
          if [ "${check_changed_files}" != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%M%S)
            branch_name="update-versions-${current_date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node agent versions to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node agent versions to latest" --body "Bumping edge node agent versions to latest iteration" --base main --head $branch_name
          fi
  update-manifest-infra-charts:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - post-merge-pipeline
      - push-manifest
      - collect-versions
    if: ${{ always() && needs.pre-checks.outputs.manifest == 'true' }}
    steps:
      - name: Checkout infra-charts
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: open-edge-platform/infra-charts
          path: infra-charts
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: 'base'

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "GitHub Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: infra-charts
        env:
          manifest_version: ${{ needs.collect-versions.outputs.manifest_version }}
        run: |
          if [[ $(echo "${manifest_version}" | grep 'dev') ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            sed -i "s#  enAgentManifestTag:  .*#  enAgentManifestTag: \"${manifest_version}\"#" infra-config/values.yaml
          fi

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: infra-charts
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          GH_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

          check_changed_files=$(git status -s)
          if [ "${check_changed_files}" != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%M%S)
            branch_name="update-manifest-version-${current_date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node manifest version to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node manifest version to latest" --body "Bumping edge node manifest version to latest iteration" --base main --head $branch_name
          fi
  update-manifest-emf:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - pre-checks
      - post-merge-pipeline
      - push-manifest
      - collect-versions
    if: ${{ always() && needs.pre-checks.outputs.manifest == 'true' }}
    steps:
      - name: Checkout EMF repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: open-edge-platform/edge-manageability-framework
          path: edge-manageability-framework
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@76700c2fb6d547733b9218d9638dca43f5296399  # 0.1.52
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base"

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "GitHub Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: edge-manageability-framework
        env:
          manifest_version: ${{ needs.collect-versions.outputs.manifest_version }}
        run: |
          if [[ $(echo "${manifest_version}" | grep 'dev') ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            sed -i "s#    enAgentManifestTag: .*#    enAgentManifestTag: \""${manifest_version}"\"#" argocd/applications/configs/infra-onboarding.yaml
          fi

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: edge-manageability-framework
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          GH_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
        run: |
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"

          check_changed_files=$(git status -s)
          if [ "${check_changed_files}" != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%M%S)
            branch_name="update-manifest-version-${current_date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node manifest version to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node manifest version to latest" --body "Bumping edge node manifest version to latest iteration" --base main --head $branch_name
          fi
