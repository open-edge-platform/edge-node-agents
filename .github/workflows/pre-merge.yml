---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Pre-Merge CI Pipeline

on:
  pull_request:
    branches:
      - main
      - release-*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  pre-checks:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      filtered_projects: ${{ steps.filter-changes.outputs.filtered_projects }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: "Verify Branch Name"
        uses: open-edge-platform/orch-ci/verify-branch-name@bf0ca523f17ab9f79ad5f45df760d302b68ac932  # 0.1.39
      - name: "Discover Changed Subfolders"
        id: discover-changes
        uses: open-edge-platform/orch-ci/discover-changed-subfolders@bf0ca523f17ab9f79ad5f45df760d302b68ac932  # 0.1.39
      - name: "Filter Out Unwanted Changed Subfolders"
        id: filter-changes
        env:
          changed_projects: ${{ steps.discover-changes.outputs.changed_projects }}
        run: |
          folders_to_remove='[".github",".reuse","LICENSES"]'
          
          filtered_projects=$(echo "$changed_projects" | jq -cr --argjson folders_to_remove "$folders_to_remove" 'map(select(. as $item | $folders_to_remove | index($item) | not))')
          echo "filtered_projects=${filtered_projects}" >> ${GITHUB_OUTPUT}
  pre-merge-pipeline:
    permissions:
      contents: read
    needs: pre-checks
    if: ${{ needs.pre-checks.outputs.filtered_projects != '[]' && needs.pre-checks.outputs.filtered_projects != '[""]' }}
    strategy:
      fail-fast: false
      matrix:
        #runner_version: [ubuntu-24.04, ubuntu-22.04]
        project_folder: ${{ fromJson(needs.pre-checks.outputs.filtered_projects) }}
    uses: open-edge-platform/orch-ci/.github/workflows/pre-merge.yml@bf0ca523f17ab9f79ad5f45df760d302b68ac932  # 0.1.39
    with:
      #runner_version: ${{ matrix.runner_version }}
      runs_on: ubuntu-22.04
      run_security_scans: true
      run_version_check: true
      run_reuse_check: true
      run_build: true
      run_lint: true
      run_test: true
      run_integration_test: true
      #run_fuzz_test: true  ## gets executed when run_integration_test: true
      run_package_build: true
      #run_package_test: true  ## deosn't seem to do anything aparth from an echo
      #run_shellcheck_common: true  ## should be part of make lint
      #run_shellcheck_agent: true  ## should be part of make lint
      prefix_tag_separator: "/"
      project_folder: ${{ matrix.project_folder }}
      remove_cache_go: true
      cache_go: true
      trivy_config_path: ${{ matrix.project_folder }}/trivy.yaml
      bootstrap_tools: "all,golangci-lint2"
    secrets:
      NO_AUTH_ECR_PUSH_USERNAME: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
      NO_AUTH_ECR_PUSH_PASSWD: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
  final-check:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [pre-merge-pipeline]
    steps:
      - name: Final Status Check
        env:
          pre_merge_pipeline_result: ${{ needs.pre-merge-pipeline.result }}
        run: |
          echo "Pre-merge pipeline result: $pre_merge_pipeline_result"
  
          if [ "$pre_merge_pipeline_result" == "success" ] || [ "$pre_merge_pipeline_result" == "skipped" ]; then
            echo "Pre-merge check passed successfully."
          else
            echo "Pre-merge checks failed. PR can't get merged"
            exit 1
          fi
