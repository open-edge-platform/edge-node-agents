---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Lint manifest

on:
  pull_request:
    branches:
      - main
      - release-*
    paths:
      - 'ena-manifest.yaml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  lint-manifest:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false # Do not persist credentials, otherwise they will clash with credentials set by bootstrap action
          fetch-depth: 0 # Fetch all history, WO sporadic issue with missing tags
          fetch-tags: true # Fetch tags
          ref: ${{ github.head_ref }} # Checkout the branch that triggered the workflow to avoid detached HEAD

      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          token: ${{ secrets.SYS_ORCH_GITHUB }}
      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@b39f8770ac653e73001e07f9f47028e1d590be5c  # 0.1.13
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "yq"

      #- name: Check manifest version
      #  run: |
      #    ./common/ci_scripts/manifest-versioning.sh check
        
      - name: Lint manifest
        shell: bash
        run: |
          yamllint ena-manifest.yaml
  collect-versions:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - lint-manifest
    outputs:
      manifest_version: ${{ steps.manifest-version.outputs.version }}
      cluster_agent_version: ${{ steps.agent-versions.outputs.cluster_agent }}
      hardware_discovery_agent_version: ${{ steps.agent-versions.outputs.hardware_discovery_agent }}
      node_agent_version: ${{ steps.agent-versions.outputs.node_agent }}
      platform_observability_agent_version: ${{ steps.agent-versions.outputs.platform_observability_agent }}
      platform_telemetry_agent_version: ${{ steps.agent-versions.outputs.platform_telemetry_agent }}
      platform_update_agent_version: ${{ steps.agent-versions.outputs.platform_update_agent }}
      inbm_version: ${{ steps.inbm-version.outputs.inbm_version }}
      caddy_version: ${{ steps.caddy-version.outputs.inbm_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0 # Fetch all history, WO sporadic issue with missing tags
          fetch-tags: true # Fetch tags
          ref: ${{ github.head_ref }} # Checkout the branch that triggered the workflow to avoid detached HEAD

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@40d61a820157bc9b70d3f2bdc5aec786073d48f2
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base,yq"

      - name: Get manifest version
        id: manifest-version
        shell: bash
        run: |
          echo "version=$(yq '.metadata.release' ena-manifest.yaml)" >> ${GITHUB_OUTPUT}

      - name: Get agent versions
        id: agent-versions
        shell: bash
        run: |
          echo "cluster_agent=$(head -n1 cluster-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "hardware_discovery_agent=$(head -n1 hardware-discovery-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "node_agent=$(head -n1 node-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_observability_agent=$(head -n1 platform-observability-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_telemetry_agent=$(head -n1 platform-telemetry-agent/VERSION)" >> ${GITHUB_OUTPUT}
          echo "platform_update_agent=$(head -n1 platform-update-agent/VERSION)" >> ${GITHUB_OUTPUT}

      - name: Get INBM version
        id: inbm-version
        shell: bash
        run: |
          echo "inbm_version=$(grep 'INBM_VERSION ?' platform-update-agent/Makefile | cut -d '=' -f 2-)" >> ${GITHUB_OUTPUT}

      - name: Get Caddy version
        id: caddy-version
        shell: bash
        run: |
          LINE_NUM=$(grep -n 'name: caddy' ena-manifest.yaml | cut -d ':' -f 1)
          VERSION_LINE_NUM=$((${LINE_NUM}+1))
          echo "caddy_version=$(grep -ne 'version: ' ena-manifest.yaml | grep ${VERSION_LINE_NUM} | cut -d ':' -f 3 | cut -d ' ' -f 2)" >> ${GITHUB_OUTPUT}
  update-manifest-virtual-edge-node:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - lint-manifest
      - collect-versions
    steps:
      - name: Checkout VEN repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: open-edge-platform/virtual-edge-node
          path: virtual-edge-node
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@40d61a820157bc9b70d3f2bdc5aec786073d48f2
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base"

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "Github Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.manifest_version }}" = .*dev ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            echo "${{ needs.collect-versions.outputs.manifest_version }}" > edge-node-container/EN_MANIFEST_VERSION
          fi

      - name: Update cluster-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.cluster_agent_version }}" = .*dev ]]; then
            echo "Skipping cluster agent version update as no new version created"
          else
            sed -i "s#cluster_agent_version: .*#cluster_agent_version: ${{ needs.collect-versions.outputs.cluster_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  cluster_agent_version: .*#  cluster_agent_version: ${{ needs.collect-versions.outputs.cluster_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update hardware-discovery-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.hardware_discovery_agent_version }}" = .*dev ]]; then
            echo "Skipping hardware discovery agent version update as no new version created"
          else
            sed -i "s#hardware_discovery_agent_version: .*#hardware_discovery_agent_version: ${{ needs.collect-versions.outputs.hardware_discovery_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  hardware_discovery_agent_version: .*#  hardware_discovery_agent_version: ${{ needs.collect-versions.outputs.hardware_discovery_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update node-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.node_agent_version }}" = .*dev ]]; then
            echo "Skipping node agent version update as no new version created"
          else
            sed -i "s#node_agent_version: .*#node_agent_version: ${{ needs.collect-versions.outputs.node_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  node_agent_version: .*#  node_agent_version: ${{ needs.collect-versions.outputs.node_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-observability-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.platform_observability_agent_version }}" = .*dev ]]; then
            echo "Skipping platform observability agent version update as no new version created"
          else
            sed -i "s#platform_observability_agent_version: .*#platform_observability_agent_version: ${{ needs.collect-versions.outputs.platform_observability_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_observability_agent_version: .*#  platform-observability_agent_version: ${{ needs.collect-versions.outputs.platform_observability_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-telemetry-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.platform_telemetry_agent_version }}" = .*dev ]]; then
            echo "Skipping platform telemetry agent version update as no new version created"
          else
            sed -i "s#platform_telemetry_agent_version: .*#platform_telemetry_agent_version: ${{ needs.collect-versions.outputs.platform_telemetry_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_telemetry_agent_version: .*#  platform_telemetry_agent_version: ${{ needs.collect-versions.outputs.platform_telemetry_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update platform-update-agent versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.platform_update_agent_version }}" = .*dev ]]; then
            echo "Skipping platform update agent version update as no new version created"
          else
            sed -i "s#platform_update_agent_version: .*#platform_update_agent_version: ${{ needs.collect-versions.outputs.platform_update_agent_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  platform_update_agent_version: .*#  platform_update_agent_version: ${{ needs.collect-versions.outputs.platform_update_agent_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update INBM versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          if [[ "${{ needs.collect-versions.outputs.inbm_version }}" = .*dev ]]; then
            echo "Skipping INBM version update as no new version created"
          else
            sed -i "s#inbc_program_version: .*#inbc_program_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbc_program_version: .*#  inbc_program_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_cloudadapter_agent_version: .*#inbm_cloudadapter_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_cloudadapter_agent_version: .*#  inbm_cloudadapter_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_configuration_agent_version: .*#inbm_configuration_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_configuration_agent_version: .*#  inbm_configuration_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_diagnostic_agent_version: .*#inbm_diagnostic_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_diagnostic_agent_version: .*#  inbm_diagnostic_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_dispatcher_agent_version: .*#inbm_dispatcher_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_dispatcher_agent_version: .*#  inbm_dispatcher_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#inbm_telemetry_agent_version: .*#inbm_telemetry_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  inbm_telemetry_agent_version: .*#  inbm_telemetry_agent_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#mqtt_version: .*#mqtt_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  mqtt_version: .*#  mqtt_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#tpm_provision_version: .*#tpm_provision_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  tpm_provision_version: .*#  tpm_provision_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
            sed -i "s#trtl_version: .*#trtl_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/bma_values.yaml
            sed -i "s#  trtl_version: .*#  trtl_version: ${{ needs.collect-versions.outputs.inbm_version }}#" edge-node-container/chart/values.yaml
          fi

      - name: Update Caddy versions in chart
        shell: bash
        working-directory: virtual-edge-node
        run: |
          sed -i "s#caddy_version: .*#caddy_version: ${{ needs.collect-versions.outputs.caddy_version }}#" edge-node-container/chart/bma_values.yaml
          sed -i "s#  caddy_version: .*#  caddy_version: ${{ needs.collect-versions.outputs.caddy_version }}#" edge-node-container/chart/values.yaml

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: virtual-edge-node
        run: |
          check_changed_files=$(git status -s)
          if [ ${check_changed_files} != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%M%S)
            branch_name="update-versions-${current_date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node agent versions to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node agent versions to latest" --body "Bumping edge node agent versions to latest iteration" --base main --head $branch_name
          fi
  update-manifest-infra-charts:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - lint-manifest
      - collect-versions
    steps:
      - name: Checkout infra-charts
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: open-edge-platform/infra-charts
          path: infra-charts
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@40d61a820157bc9b70d3f2bdc5aec786073d48f2
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: 'base'

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "GitHub Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: infra-charts
        run: |
          if [[ "${{ needs.collect-versions.outputs.manifest_version }}" = .*dev ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            sed -i "s#  enAgentManifestTag:  .*#  enAgentManifestTag: "${{ needs.collect-versions.outputs.manifest_version }}"#" infra-config/values.yaml

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: infra-charts
        run: |
          check_changed_files=$(git status -s)
          if [ ${check_changed_files} != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%m%S)
            branch_name="update-manifest-version-${current-date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node manifest version to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node manifest version to latest" --body "Bumping edge node manifest version to latest iteration" --base main --head $branch_name
          fi
  update-manifest-emf:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs:
      - lint-manifest
      - collect-versions
    steps:
      - name: Checkout EMF repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: open-edge-platform/edge-manageability-framework
          path: edge-manageability-framework
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Setup CI environment
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@40d61a820157bc9b70d3f2bdc5aec786073d48f2
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "base"

      - name: Set up Git identity
        shell: bash
        run: |
          git config --global user.name "GitHub Bot"
          git config --global user.email "github-bot@intel.com"

      - name: Update manifest version in chart
        shell: bash
        working-directory: edge-manageability-framework
        run: |
          if [[ "${{ needs.collect-versions.outputs.manifest_version }}" = .*dev ]]; then
            echo "Skipping manifest version update as no new version created"
          else
            sed -i "s#    enAgentManifestTag: .*#    enAgentManifestTag: \""${{ needs.collect-versions.outputs.manifest_version }}"\"#" argocd/applications/configs/infra-onboarding.yaml
          fi

      - name: Commit changes to branch and create PR
        shell: bash
        working-directory: edge-manageability-framework
        run: |
          check_changed_files=$(git status -s)
          if [ ${check_changed_files} != "" ]; then
            current_date=$(date +%d-%m-%Y-%H%M%S)
            branch_name="update-manifest-version-${current_date}"
            git checkout -b $branch_name

            git add -A
            git commit -m "Update edge node manifest version to latest"
            git push origin $branch_name

            gh pr create --title "Update edge node manifest version to latest" --body "Bumping edge node manifest version to latest iteration" --base main --head $branch_name
          fi
