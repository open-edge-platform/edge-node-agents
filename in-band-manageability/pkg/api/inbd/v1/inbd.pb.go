// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: inbd/v1/inbd.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryOption int32

const (
	QueryOption_QUERY_OPTION_UNSPECIFIED QueryOption = 0
	QueryOption_QUERY_OPTION_HARDWARE    QueryOption = 1 // hw - Hardware information
	QueryOption_QUERY_OPTION_FIRMWARE    QueryOption = 2 // fw - Firmware information
	QueryOption_QUERY_OPTION_OS          QueryOption = 3 // os - Operating System information
	QueryOption_QUERY_OPTION_SWBOM       QueryOption = 4 // swbom - Software BOM information
	QueryOption_QUERY_OPTION_VERSION     QueryOption = 5 // version - Version information
	QueryOption_QUERY_OPTION_ALL         QueryOption = 6 // all - All available information
)

// Enum value maps for QueryOption.
var (
	QueryOption_name = map[int32]string{
		0: "QUERY_OPTION_UNSPECIFIED",
		1: "QUERY_OPTION_HARDWARE",
		2: "QUERY_OPTION_FIRMWARE",
		3: "QUERY_OPTION_OS",
		4: "QUERY_OPTION_SWBOM",
		5: "QUERY_OPTION_VERSION",
		6: "QUERY_OPTION_ALL",
	}
	QueryOption_value = map[string]int32{
		"QUERY_OPTION_UNSPECIFIED": 0,
		"QUERY_OPTION_HARDWARE":    1,
		"QUERY_OPTION_FIRMWARE":    2,
		"QUERY_OPTION_OS":          3,
		"QUERY_OPTION_SWBOM":       4,
		"QUERY_OPTION_VERSION":     5,
		"QUERY_OPTION_ALL":         6,
	}
)

func (x QueryOption) Enum() *QueryOption {
	p := new(QueryOption)
	*p = x
	return p
}

func (x QueryOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOption) Descriptor() protoreflect.EnumDescriptor {
	return file_inbd_v1_inbd_proto_enumTypes[0].Descriptor()
}

func (QueryOption) Type() protoreflect.EnumType {
	return &file_inbd_v1_inbd_proto_enumTypes[0]
}

func (x QueryOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOption.Descriptor instead.
func (QueryOption) EnumDescriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{0}
}

type SetPowerStateRequest_PowerAction int32

const (
	SetPowerStateRequest_POWER_ACTION_UNSPECIFIED SetPowerStateRequest_PowerAction = 0
	SetPowerStateRequest_POWER_ACTION_OFF         SetPowerStateRequest_PowerAction = 1 // Power off the node
	SetPowerStateRequest_POWER_ACTION_CYCLE       SetPowerStateRequest_PowerAction = 2 // Cycle power to the node
)

// Enum value maps for SetPowerStateRequest_PowerAction.
var (
	SetPowerStateRequest_PowerAction_name = map[int32]string{
		0: "POWER_ACTION_UNSPECIFIED",
		1: "POWER_ACTION_OFF",
		2: "POWER_ACTION_CYCLE",
	}
	SetPowerStateRequest_PowerAction_value = map[string]int32{
		"POWER_ACTION_UNSPECIFIED": 0,
		"POWER_ACTION_OFF":         1,
		"POWER_ACTION_CYCLE":       2,
	}
)

func (x SetPowerStateRequest_PowerAction) Enum() *SetPowerStateRequest_PowerAction {
	p := new(SetPowerStateRequest_PowerAction)
	*p = x
	return p
}

func (x SetPowerStateRequest_PowerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetPowerStateRequest_PowerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_inbd_v1_inbd_proto_enumTypes[1].Descriptor()
}

func (SetPowerStateRequest_PowerAction) Type() protoreflect.EnumType {
	return &file_inbd_v1_inbd_proto_enumTypes[1]
}

func (x SetPowerStateRequest_PowerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetPowerStateRequest_PowerAction.Descriptor instead.
func (SetPowerStateRequest_PowerAction) EnumDescriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{0, 0}
}

type UpdateSystemSoftwareRequest_DownloadMode int32

const (
	UpdateSystemSoftwareRequest_DOWNLOAD_MODE_UNSPECIFIED   UpdateSystemSoftwareRequest_DownloadMode = 0
	UpdateSystemSoftwareRequest_DOWNLOAD_MODE_FULL          UpdateSystemSoftwareRequest_DownloadMode = 1 // Both download the package and install the package
	UpdateSystemSoftwareRequest_DOWNLOAD_MODE_NO_DOWNLOAD   UpdateSystemSoftwareRequest_DownloadMode = 2 // Do not download the package.  Only install.
	UpdateSystemSoftwareRequest_DOWNLOAD_MODE_DOWNLOAD_ONLY UpdateSystemSoftwareRequest_DownloadMode = 3 // Only download the package.  Do not install.
)

// Enum value maps for UpdateSystemSoftwareRequest_DownloadMode.
var (
	UpdateSystemSoftwareRequest_DownloadMode_name = map[int32]string{
		0: "DOWNLOAD_MODE_UNSPECIFIED",
		1: "DOWNLOAD_MODE_FULL",
		2: "DOWNLOAD_MODE_NO_DOWNLOAD",
		3: "DOWNLOAD_MODE_DOWNLOAD_ONLY",
	}
	UpdateSystemSoftwareRequest_DownloadMode_value = map[string]int32{
		"DOWNLOAD_MODE_UNSPECIFIED":   0,
		"DOWNLOAD_MODE_FULL":          1,
		"DOWNLOAD_MODE_NO_DOWNLOAD":   2,
		"DOWNLOAD_MODE_DOWNLOAD_ONLY": 3,
	}
)

func (x UpdateSystemSoftwareRequest_DownloadMode) Enum() *UpdateSystemSoftwareRequest_DownloadMode {
	p := new(UpdateSystemSoftwareRequest_DownloadMode)
	*p = x
	return p
}

func (x UpdateSystemSoftwareRequest_DownloadMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateSystemSoftwareRequest_DownloadMode) Descriptor() protoreflect.EnumDescriptor {
	return file_inbd_v1_inbd_proto_enumTypes[2].Descriptor()
}

func (UpdateSystemSoftwareRequest_DownloadMode) Type() protoreflect.EnumType {
	return &file_inbd_v1_inbd_proto_enumTypes[2]
}

func (x UpdateSystemSoftwareRequest_DownloadMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateSystemSoftwareRequest_DownloadMode.Descriptor instead.
func (UpdateSystemSoftwareRequest_DownloadMode) EnumDescriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{2, 0}
}

type SetPowerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action SetPowerStateRequest_PowerAction `protobuf:"varint,1,opt,name=action,proto3,enum=inbd.v1.SetPowerStateRequest_PowerAction" json:"action,omitempty"` // Action to perform on the node's power state
}

func (x *SetPowerStateRequest) Reset() {
	*x = SetPowerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPowerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerStateRequest) ProtoMessage() {}

func (x *SetPowerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerStateRequest.ProtoReflect.Descriptor instead.
func (*SetPowerStateRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{0}
}

func (x *SetPowerStateRequest) GetAction() SetPowerStateRequest_PowerAction {
	if x != nil {
		return x.Action
	}
	return SetPowerStateRequest_POWER_ACTION_UNSPECIFIED
}

type UpdateFirmwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                          // URL from which to remotely retrieve the package
	ReleaseDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`       // Release date of the new firmware update.
	DoNotReboot   bool                   `protobuf:"varint,3,opt,name=do_not_reboot,json=doNotReboot,proto3" json:"do_not_reboot,omitempty"`    // Whether to reboot the node after the firmware update attempt
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`                                // Username if authentication is required for the package source
	Signature     string                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`                              // Signature of the package
	HashAlgorithm string                 `protobuf:"bytes,6,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // "sha256", "sha384", "sha512"
}

func (x *UpdateFirmwareRequest) Reset() {
	*x = UpdateFirmwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirmwareRequest) ProtoMessage() {}

func (x *UpdateFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirmwareRequest.ProtoReflect.Descriptor instead.
func (*UpdateFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateFirmwareRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateFirmwareRequest) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *UpdateFirmwareRequest) GetDoNotReboot() bool {
	if x != nil {
		return x.DoNotReboot
	}
	return false
}

func (x *UpdateFirmwareRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateFirmwareRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *UpdateFirmwareRequest) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

type UpdateSystemSoftwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string                                   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`                                                          // URL from which to remotely retrieve the package
	ReleaseDate *timestamppb.Timestamp                   `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`                       // Release date of the new SW update.
	Mode        UpdateSystemSoftwareRequest_DownloadMode `protobuf:"varint,3,opt,name=mode,proto3,enum=inbd.v1.UpdateSystemSoftwareRequest_DownloadMode" json:"mode,omitempty"` // Mode for installing the software update regarding download and install steps.
	DoNotReboot bool                                     `protobuf:"varint,4,opt,name=do_not_reboot,json=doNotReboot,proto3" json:"do_not_reboot,omitempty"`                    // Whether to reboot the node after the software update attempt
	PackageList []string                                 `protobuf:"bytes,5,rep,name=package_list,json=packageList,proto3" json:"package_list,omitempty"`                       // List of packages to install if whole package update isn't desired.
	Signature   string                                   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`                                              // Signature of the package
}

func (x *UpdateSystemSoftwareRequest) Reset() {
	*x = UpdateSystemSoftwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemSoftwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemSoftwareRequest) ProtoMessage() {}

func (x *UpdateSystemSoftwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemSoftwareRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemSoftwareRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSystemSoftwareRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateSystemSoftwareRequest) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *UpdateSystemSoftwareRequest) GetMode() UpdateSystemSoftwareRequest_DownloadMode {
	if x != nil {
		return x.Mode
	}
	return UpdateSystemSoftwareRequest_DOWNLOAD_MODE_UNSPECIFIED
}

func (x *UpdateSystemSoftwareRequest) GetDoNotReboot() bool {
	if x != nil {
		return x.DoNotReboot
	}
	return false
}

func (x *UpdateSystemSoftwareRequest) GetPackageList() []string {
	if x != nil {
		return x.PackageList
	}
	return nil
}

func (x *UpdateSystemSoftwareRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type UpdateOSSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceList []string `protobuf:"bytes,1,rep,name=source_list,json=sourceList,proto3" json:"source_list,omitempty"` // List of sources to update.
}

func (x *UpdateOSSourceRequest) Reset() {
	*x = UpdateOSSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOSSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOSSourceRequest) ProtoMessage() {}

func (x *UpdateOSSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOSSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateOSSourceRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOSSourceRequest) GetSourceList() []string {
	if x != nil {
		return x.SourceList
	}
	return nil
}

type AddApplicationSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     []string `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"`
	Filename   string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	GpgKeyUri  string   `protobuf:"bytes,3,opt,name=gpg_key_uri,json=gpgKeyUri,proto3" json:"gpg_key_uri,omitempty"` // URL from which to remotely retrieve the package
	GpgKeyName string   `protobuf:"bytes,4,opt,name=gpg_key_name,json=gpgKeyName,proto3" json:"gpg_key_name,omitempty"`
}

func (x *AddApplicationSourceRequest) Reset() {
	*x = AddApplicationSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddApplicationSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddApplicationSourceRequest) ProtoMessage() {}

func (x *AddApplicationSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddApplicationSourceRequest.ProtoReflect.Descriptor instead.
func (*AddApplicationSourceRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{4}
}

func (x *AddApplicationSourceRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *AddApplicationSourceRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *AddApplicationSourceRequest) GetGpgKeyUri() string {
	if x != nil {
		return x.GpgKeyUri
	}
	return ""
}

func (x *AddApplicationSourceRequest) GetGpgKeyName() string {
	if x != nil {
		return x.GpgKeyName
	}
	return ""
}

type RemoveApplicationSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename   string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	GpgKeyName string `protobuf:"bytes,2,opt,name=gpg_key_name,json=gpgKeyName,proto3" json:"gpg_key_name,omitempty"`
}

func (x *RemoveApplicationSourceRequest) Reset() {
	*x = RemoveApplicationSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveApplicationSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveApplicationSourceRequest) ProtoMessage() {}

func (x *RemoveApplicationSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveApplicationSourceRequest.ProtoReflect.Descriptor instead.
func (*RemoveApplicationSourceRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveApplicationSourceRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *RemoveApplicationSourceRequest) GetGpgKeyName() string {
	if x != nil {
		return x.GpgKeyName
	}
	return ""
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // Status code of the operation
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // set if there is an error
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *UpdateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SetPowerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // Status code of the operation
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // set if there is an error
}

func (x *SetPowerStateResponse) Reset() {
	*x = SetPowerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPowerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPowerStateResponse) ProtoMessage() {}

func (x *SetPowerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPowerStateResponse.ProtoReflect.Descriptor instead.
func (*SetPowerStateResponse) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{7}
}

func (x *SetPowerStateResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SetPowerStateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LoadConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Signature     string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`                              // Signature of the package
	HashAlgorithm string `protobuf:"bytes,3,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // "sha256", "sha384", "sha512"
}

func (x *LoadConfigRequest) Reset() {
	*x = LoadConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadConfigRequest) ProtoMessage() {}

func (x *LoadConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadConfigRequest.ProtoReflect.Descriptor instead.
func (*LoadConfigRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{8}
}

func (x *LoadConfigRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *LoadConfigRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *LoadConfigRequest) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{10}
}

func (x *SetConfigRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type AppendConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AppendConfigRequest) Reset() {
	*x = AppendConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendConfigRequest) ProtoMessage() {}

func (x *AppendConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendConfigRequest.ProtoReflect.Descriptor instead.
func (*AppendConfigRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{11}
}

func (x *AppendConfigRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RemoveConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RemoveConfigRequest) Reset() {
	*x = RemoveConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConfigRequest) ProtoMessage() {}

func (x *RemoveConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConfigRequest.ProtoReflect.Descriptor instead.
func (*RemoveConfigRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveConfigRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // Status code of the operation
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // set if there is an error
	Success    bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ConfigResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Message    string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{14}
}

func (x *GetConfigResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetConfigResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetConfigResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetConfigResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option QueryOption `protobuf:"varint,1,opt,name=option,proto3,enum=inbd.v1.QueryOption" json:"option,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{15}
}

func (x *QueryRequest) GetOption() QueryOption {
	if x != nil {
		return x.Option
	}
	return QueryOption_QUERY_OPTION_UNSPECIFIED
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32      `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // HTTP-style status code
	Error      string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                              // Error message if any
	Success    bool       `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`                         // Success indicator
	Data       *QueryData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                // Query result data
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{16}
}

func (x *QueryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueryResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryResponse) GetData() *QueryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Timestamp when data was collected
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`           // Type of telemetry data
	// Types that are assignable to Values:
	//	*QueryData_Hardware
	//	*QueryData_Firmware
	//	*QueryData_OsInfo
	//	*QueryData_Swbom
	//	*QueryData_Version
	//	*QueryData_AllInfo
	Values isQueryData_Values `protobuf_oneof:"values"`
}

func (x *QueryData) Reset() {
	*x = QueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryData) ProtoMessage() {}

func (x *QueryData) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryData.ProtoReflect.Descriptor instead.
func (*QueryData) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{17}
}

func (x *QueryData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *QueryData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *QueryData) GetValues() isQueryData_Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (x *QueryData) GetHardware() *HardwareInfo {
	if x, ok := x.GetValues().(*QueryData_Hardware); ok {
		return x.Hardware
	}
	return nil
}

func (x *QueryData) GetFirmware() *FirmwareInfo {
	if x, ok := x.GetValues().(*QueryData_Firmware); ok {
		return x.Firmware
	}
	return nil
}

func (x *QueryData) GetOsInfo() *OSInfo {
	if x, ok := x.GetValues().(*QueryData_OsInfo); ok {
		return x.OsInfo
	}
	return nil
}

func (x *QueryData) GetSwbom() *SWBOMInfo {
	if x, ok := x.GetValues().(*QueryData_Swbom); ok {
		return x.Swbom
	}
	return nil
}

func (x *QueryData) GetVersion() *VersionInfo {
	if x, ok := x.GetValues().(*QueryData_Version); ok {
		return x.Version
	}
	return nil
}

func (x *QueryData) GetAllInfo() *AllInfo {
	if x, ok := x.GetValues().(*QueryData_AllInfo); ok {
		return x.AllInfo
	}
	return nil
}

type isQueryData_Values interface {
	isQueryData_Values()
}

type QueryData_Hardware struct {
	Hardware *HardwareInfo `protobuf:"bytes,3,opt,name=hardware,proto3,oneof"` // Hardware information
}

type QueryData_Firmware struct {
	Firmware *FirmwareInfo `protobuf:"bytes,4,opt,name=firmware,proto3,oneof"` // Firmware information
}

type QueryData_OsInfo struct {
	OsInfo *OSInfo `protobuf:"bytes,5,opt,name=os_info,json=osInfo,proto3,oneof"` // Operating system information
}

type QueryData_Swbom struct {
	Swbom *SWBOMInfo `protobuf:"bytes,6,opt,name=swbom,proto3,oneof"` // Software BOM information
}

type QueryData_Version struct {
	Version *VersionInfo `protobuf:"bytes,7,opt,name=version,proto3,oneof"` // Version information
}

type QueryData_AllInfo struct {
	AllInfo *AllInfo `protobuf:"bytes,8,opt,name=all_info,json=allInfo,proto3,oneof"` // All information combined
}

func (*QueryData_Hardware) isQueryData_Values() {}

func (*QueryData_Firmware) isQueryData_Values() {}

func (*QueryData_OsInfo) isQueryData_Values() {}

func (*QueryData_Swbom) isQueryData_Values() {}

func (*QueryData_Version) isQueryData_Values() {}

func (*QueryData_AllInfo) isQueryData_Values() {}

// Hardware information structure
type HardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuId               string `protobuf:"bytes,1,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`                                             // cpuId
	TotalPhysicalMemory string `protobuf:"bytes,2,opt,name=total_physical_memory,json=totalPhysicalMemory,proto3" json:"total_physical_memory,omitempty"` // totalPhysicalMemory
	DiskInformation     string `protobuf:"bytes,3,opt,name=disk_information,json=diskInformation,proto3" json:"disk_information,omitempty"`               // diskInformation
	SystemManufacturer  string `protobuf:"bytes,4,opt,name=system_manufacturer,json=systemManufacturer,proto3" json:"system_manufacturer,omitempty"`      // systemManufacturer
	SystemProductName   string `protobuf:"bytes,5,opt,name=system_product_name,json=systemProductName,proto3" json:"system_product_name,omitempty"`       // systemProductName
}

func (x *HardwareInfo) Reset() {
	*x = HardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInfo) ProtoMessage() {}

func (x *HardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInfo.ProtoReflect.Descriptor instead.
func (*HardwareInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{18}
}

func (x *HardwareInfo) GetCpuId() string {
	if x != nil {
		return x.CpuId
	}
	return ""
}

func (x *HardwareInfo) GetTotalPhysicalMemory() string {
	if x != nil {
		return x.TotalPhysicalMemory
	}
	return ""
}

func (x *HardwareInfo) GetDiskInformation() string {
	if x != nil {
		return x.DiskInformation
	}
	return ""
}

func (x *HardwareInfo) GetSystemManufacturer() string {
	if x != nil {
		return x.SystemManufacturer
	}
	return ""
}

func (x *HardwareInfo) GetSystemProductName() string {
	if x != nil {
		return x.SystemProductName
	}
	return ""
}

// Firmware information structure
type FirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiosVendor      string                 `protobuf:"bytes,1,opt,name=bios_vendor,json=biosVendor,proto3" json:"bios_vendor,omitempty"`                  // biosVendor
	BiosVersion     string                 `protobuf:"bytes,2,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty"`               // biosVersion
	BiosReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=bios_release_date,json=biosReleaseDate,proto3" json:"bios_release_date,omitempty"` // biosReleaseDate
}

func (x *FirmwareInfo) Reset() {
	*x = FirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfo) ProtoMessage() {}

func (x *FirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfo.ProtoReflect.Descriptor instead.
func (*FirmwareInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{19}
}

func (x *FirmwareInfo) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *FirmwareInfo) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *FirmwareInfo) GetBiosReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BiosReleaseDate
	}
	return nil
}

// Operating system information structure
type OSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsInformation string `protobuf:"bytes,1,opt,name=os_information,json=osInformation,proto3" json:"os_information,omitempty"` // OS information
}

func (x *OSInfo) Reset() {
	*x = OSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSInfo) ProtoMessage() {}

func (x *OSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSInfo.ProtoReflect.Descriptor instead.
func (*OSInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{20}
}

func (x *OSInfo) GetOsInformation() string {
	if x != nil {
		return x.OsInformation
	}
	return ""
}

// Software BOM information structure
type SWBOMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages            []*SoftwarePackage     `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`                                                  // List of installed software packages
	CollectionTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=collection_timestamp,json=collectionTimestamp,proto3" json:"collection_timestamp,omitempty"` // When SWBOM was collected
	CollectionMethod    string                 `protobuf:"bytes,3,opt,name=collection_method,json=collectionMethod,proto3" json:"collection_method,omitempty"`          // How SWBOM was collected
}

func (x *SWBOMInfo) Reset() {
	*x = SWBOMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SWBOMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SWBOMInfo) ProtoMessage() {}

func (x *SWBOMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SWBOMInfo.ProtoReflect.Descriptor instead.
func (*SWBOMInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{21}
}

func (x *SWBOMInfo) GetPackages() []*SoftwarePackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *SWBOMInfo) GetCollectionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectionTimestamp
	}
	return nil
}

func (x *SWBOMInfo) GetCollectionMethod() string {
	if x != nil {
		return x.CollectionMethod
	}
	return ""
}

type SoftwarePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                  // Package name
	Version      string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                            // Package version
	Vendor       string                 `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`                              // Package vendor/publisher
	InstallDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=install_date,json=installDate,proto3" json:"install_date,omitempty"` // Installation date
	License      string                 `protobuf:"bytes,5,opt,name=license,proto3" json:"license,omitempty"`                            // License information
	Description  string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                    // Package description
	Type         string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`                                  // Package type (deb, rpm, mender, etc.)
	Architecture string                 `protobuf:"bytes,8,opt,name=architecture,proto3" json:"architecture,omitempty"`                  // Package architecture
}

func (x *SoftwarePackage) Reset() {
	*x = SoftwarePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwarePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwarePackage) ProtoMessage() {}

func (x *SoftwarePackage) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwarePackage.ProtoReflect.Descriptor instead.
func (*SoftwarePackage) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{22}
}

func (x *SoftwarePackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SoftwarePackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SoftwarePackage) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *SoftwarePackage) GetInstallDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InstallDate
	}
	return nil
}

func (x *SoftwarePackage) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *SoftwarePackage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SoftwarePackage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SoftwarePackage) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

// Version information structure
type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                                // Version number
	InbmVersionCommit string                 `protobuf:"bytes,2,opt,name=inbm_version_commit,json=inbmVersionCommit,proto3" json:"inbm_version_commit,omitempty"` // INBM version commit
	BuildDate         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`                           // Build date
	GitCommit         string                 `protobuf:"bytes,4,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`                           // Git commit hash
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{23}
}

func (x *VersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionInfo) GetInbmVersionCommit() string {
	if x != nil {
		return x.InbmVersionCommit
	}
	return ""
}

func (x *VersionInfo) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *VersionInfo) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

type PowerCapabilitiesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shutdown         bool   `protobuf:"varint,1,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	Reboot           bool   `protobuf:"varint,2,opt,name=reboot,proto3" json:"reboot,omitempty"`
	Suspend          bool   `protobuf:"varint,3,opt,name=suspend,proto3" json:"suspend,omitempty"`
	Hibernate        bool   `protobuf:"varint,4,opt,name=hibernate,proto3" json:"hibernate,omitempty"`
	CapabilitiesJson string `protobuf:"bytes,5,opt,name=capabilities_json,json=capabilitiesJson,proto3" json:"capabilities_json,omitempty"`
}

func (x *PowerCapabilitiesInfo) Reset() {
	*x = PowerCapabilitiesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCapabilitiesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCapabilitiesInfo) ProtoMessage() {}

func (x *PowerCapabilitiesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCapabilitiesInfo.ProtoReflect.Descriptor instead.
func (*PowerCapabilitiesInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{24}
}

func (x *PowerCapabilitiesInfo) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

func (x *PowerCapabilitiesInfo) GetReboot() bool {
	if x != nil {
		return x.Reboot
	}
	return false
}

func (x *PowerCapabilitiesInfo) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *PowerCapabilitiesInfo) GetHibernate() bool {
	if x != nil {
		return x.Hibernate
	}
	return false
}

func (x *PowerCapabilitiesInfo) GetCapabilitiesJson() string {
	if x != nil {
		return x.CapabilitiesJson
	}
	return ""
}

// Combined information structure (for "all" queries)
type AllInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hardware          *HardwareInfo          `protobuf:"bytes,1,opt,name=hardware,proto3" json:"hardware,omitempty"`                                            // Hardware information
	Firmware          *FirmwareInfo          `protobuf:"bytes,2,opt,name=firmware,proto3" json:"firmware,omitempty"`                                            // Firmware information
	OsInfo            *OSInfo                `protobuf:"bytes,3,opt,name=os_info,json=osInfo,proto3" json:"os_info,omitempty"`                                  // OS information
	Version           *VersionInfo           `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                                              // Version information
	PowerCapabilities *PowerCapabilitiesInfo `protobuf:"bytes,5,opt,name=power_capabilities,json=powerCapabilities,proto3" json:"power_capabilities,omitempty"` // Power capabilities (Linux only)
	Swbom             *SWBOMInfo             `protobuf:"bytes,6,opt,name=swbom,proto3" json:"swbom,omitempty"`                                                  // SWBOM info
	AdditionalInfo    []string               `protobuf:"bytes,7,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`          // Any additional system information
}

func (x *AllInfo) Reset() {
	*x = AllInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inbd_v1_inbd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllInfo) ProtoMessage() {}

func (x *AllInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inbd_v1_inbd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllInfo.ProtoReflect.Descriptor instead.
func (*AllInfo) Descriptor() ([]byte, []int) {
	return file_inbd_v1_inbd_proto_rawDescGZIP(), []int{25}
}

func (x *AllInfo) GetHardware() *HardwareInfo {
	if x != nil {
		return x.Hardware
	}
	return nil
}

func (x *AllInfo) GetFirmware() *FirmwareInfo {
	if x != nil {
		return x.Firmware
	}
	return nil
}

func (x *AllInfo) GetOsInfo() *OSInfo {
	if x != nil {
		return x.OsInfo
	}
	return nil
}

func (x *AllInfo) GetVersion() *VersionInfo {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *AllInfo) GetPowerCapabilities() *PowerCapabilitiesInfo {
	if x != nil {
		return x.PowerCapabilities
	}
	return nil
}

func (x *AllInfo) GetSwbom() *SWBOMInfo {
	if x != nil {
		return x.Swbom
	}
	return nil
}

func (x *AllInfo) GetAdditionalInfo() []string {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

var File_inbd_v1_inbd_proto protoreflect.FileDescriptor

var file_inbd_v1_inbd_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x62, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x22,
	0xd9, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xba, 0x48, 0x47, 0xba, 0x01, 0x41, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x75, 0x72, 0x6c, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55,
	0x52, 0x4c, 0x2e, 0x1a, 0x1a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20,
	0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x55, 0x72, 0x69, 0x28, 0x29, 0xc8,
	0x01, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xab, 0x04, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xba, 0x48, 0x47, 0xba, 0x01, 0x41,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x75, 0x72, 0x6c,
	0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x55, 0x52, 0x4c, 0x2e, 0x1a, 0x1a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27,
	0x27, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x55, 0x72, 0x69, 0x28,
	0x29, 0xc8, 0x01, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e,
	0xba, 0x48, 0x1b, 0x92, 0x01, 0x18, 0x18, 0x01, 0x22, 0x14, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x92, 0x01, 0x1f, 0x18,
	0x01, 0x22, 0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0xf4, 0x03, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x3a, 0x2f, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x41,
	0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x92,
	0x01, 0x1f, 0x18, 0x01, 0x22, 0x1b, 0x72, 0x19, 0x10, 0x01, 0x18, 0xf4, 0x03, 0x32, 0x12, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x24, 0x3a,
	0x2f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a,
	0x0b, 0x67, 0x70, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x4a, 0xba, 0x48, 0x47, 0xba, 0x01, 0x41, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x75, 0x72, 0x69, 0x12, 0x18, 0x75, 0x72, 0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x2e, 0x1a,
	0x1a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x7c, 0x7c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x55, 0x72, 0x69, 0x28, 0x29, 0xc8, 0x01, 0x00, 0x52, 0x09,
	0x67, 0x70, 0x67, 0x4b, 0x65, 0x79, 0x55, 0x72, 0x69, 0x12, 0x28, 0x0a, 0x0c, 0x67, 0x70, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x0a, 0x67, 0x70, 0x67, 0x4b, 0x65, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0c, 0x67, 0x70, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x0a, 0x67, 0x70, 0x67, 0x4b, 0x65, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x15,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc6, 0x01, 0x0a,
	0x11, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4a, 0xba, 0x48, 0x47, 0xba, 0x01, 0x41, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75,
	0x72, 0x69, 0x12, 0x18, 0x75, 0x72, 0x69, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x55, 0x52, 0x4c, 0x2e, 0x1a, 0x1a, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x69, 0x73, 0x55, 0x72, 0x69, 0x28, 0x29, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x24, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xba, 0x48, 0x37, 0xba, 0x01, 0x31, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x70, 0x61, 0x74,
	0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x62, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xba, 0x48, 0x37,
	0xba, 0x01, 0x31, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x17, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21,
	0x3d, 0x20, 0x27, 0x27, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3a, 0xba, 0x48, 0x37, 0xba, 0x01, 0x31, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x70, 0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x1a,
	0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xba, 0x48, 0x37, 0xba, 0x01,
	0x31, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x70,
	0x61, 0x74, 0x68, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20,
	0x27, 0x27, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7b, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x4b, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x03, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x62,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x77, 0x62,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x57, 0x42, 0x4f, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x77, 0x62, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x62, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x0a, 0x06, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x53, 0x57, 0x42, 0x4f, 0x4d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x62, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x62, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0xb0, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x62, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x62,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e,
	0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x05, 0x73, 0x77, 0x62, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x57, 0x42, 0x4f, 0x4d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x73, 0x77, 0x62, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2a, 0xbe, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x42, 0x4f, 0x4d,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x06, 0x32, 0x8b, 0x07, 0x0a, 0x0a, 0x49, 0x6e, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x62, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x62,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x53, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x62,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x69, 0x6e,
	0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x69, 0x6e,
	0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1c, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x1e, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x62, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x69, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x62, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inbd_v1_inbd_proto_rawDescOnce sync.Once
	file_inbd_v1_inbd_proto_rawDescData = file_inbd_v1_inbd_proto_rawDesc
)

func file_inbd_v1_inbd_proto_rawDescGZIP() []byte {
	file_inbd_v1_inbd_proto_rawDescOnce.Do(func() {
		file_inbd_v1_inbd_proto_rawDescData = protoimpl.X.CompressGZIP(file_inbd_v1_inbd_proto_rawDescData)
	})
	return file_inbd_v1_inbd_proto_rawDescData
}

var file_inbd_v1_inbd_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_inbd_v1_inbd_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_inbd_v1_inbd_proto_goTypes = []interface{}{
	(QueryOption)(0),                              // 0: inbd.v1.QueryOption
	(SetPowerStateRequest_PowerAction)(0),         // 1: inbd.v1.SetPowerStateRequest.PowerAction
	(UpdateSystemSoftwareRequest_DownloadMode)(0), // 2: inbd.v1.UpdateSystemSoftwareRequest.DownloadMode
	(*SetPowerStateRequest)(nil),                  // 3: inbd.v1.SetPowerStateRequest
	(*UpdateFirmwareRequest)(nil),                 // 4: inbd.v1.UpdateFirmwareRequest
	(*UpdateSystemSoftwareRequest)(nil),           // 5: inbd.v1.UpdateSystemSoftwareRequest
	(*UpdateOSSourceRequest)(nil),                 // 6: inbd.v1.UpdateOSSourceRequest
	(*AddApplicationSourceRequest)(nil),           // 7: inbd.v1.AddApplicationSourceRequest
	(*RemoveApplicationSourceRequest)(nil),        // 8: inbd.v1.RemoveApplicationSourceRequest
	(*UpdateResponse)(nil),                        // 9: inbd.v1.UpdateResponse
	(*SetPowerStateResponse)(nil),                 // 10: inbd.v1.SetPowerStateResponse
	(*LoadConfigRequest)(nil),                     // 11: inbd.v1.LoadConfigRequest
	(*GetConfigRequest)(nil),                      // 12: inbd.v1.GetConfigRequest
	(*SetConfigRequest)(nil),                      // 13: inbd.v1.SetConfigRequest
	(*AppendConfigRequest)(nil),                   // 14: inbd.v1.AppendConfigRequest
	(*RemoveConfigRequest)(nil),                   // 15: inbd.v1.RemoveConfigRequest
	(*ConfigResponse)(nil),                        // 16: inbd.v1.ConfigResponse
	(*GetConfigResponse)(nil),                     // 17: inbd.v1.GetConfigResponse
	(*QueryRequest)(nil),                          // 18: inbd.v1.QueryRequest
	(*QueryResponse)(nil),                         // 19: inbd.v1.QueryResponse
	(*QueryData)(nil),                             // 20: inbd.v1.QueryData
	(*HardwareInfo)(nil),                          // 21: inbd.v1.HardwareInfo
	(*FirmwareInfo)(nil),                          // 22: inbd.v1.FirmwareInfo
	(*OSInfo)(nil),                                // 23: inbd.v1.OSInfo
	(*SWBOMInfo)(nil),                             // 24: inbd.v1.SWBOMInfo
	(*SoftwarePackage)(nil),                       // 25: inbd.v1.SoftwarePackage
	(*VersionInfo)(nil),                           // 26: inbd.v1.VersionInfo
	(*PowerCapabilitiesInfo)(nil),                 // 27: inbd.v1.PowerCapabilitiesInfo
	(*AllInfo)(nil),                               // 28: inbd.v1.AllInfo
	(*timestamppb.Timestamp)(nil),                 // 29: google.protobuf.Timestamp
}
var file_inbd_v1_inbd_proto_depIdxs = []int32{
	1,  // 0: inbd.v1.SetPowerStateRequest.action:type_name -> inbd.v1.SetPowerStateRequest.PowerAction
	29, // 1: inbd.v1.UpdateFirmwareRequest.release_date:type_name -> google.protobuf.Timestamp
	29, // 2: inbd.v1.UpdateSystemSoftwareRequest.release_date:type_name -> google.protobuf.Timestamp
	2,  // 3: inbd.v1.UpdateSystemSoftwareRequest.mode:type_name -> inbd.v1.UpdateSystemSoftwareRequest.DownloadMode
	0,  // 4: inbd.v1.QueryRequest.option:type_name -> inbd.v1.QueryOption
	20, // 5: inbd.v1.QueryResponse.data:type_name -> inbd.v1.QueryData
	29, // 6: inbd.v1.QueryData.timestamp:type_name -> google.protobuf.Timestamp
	21, // 7: inbd.v1.QueryData.hardware:type_name -> inbd.v1.HardwareInfo
	22, // 8: inbd.v1.QueryData.firmware:type_name -> inbd.v1.FirmwareInfo
	23, // 9: inbd.v1.QueryData.os_info:type_name -> inbd.v1.OSInfo
	24, // 10: inbd.v1.QueryData.swbom:type_name -> inbd.v1.SWBOMInfo
	26, // 11: inbd.v1.QueryData.version:type_name -> inbd.v1.VersionInfo
	28, // 12: inbd.v1.QueryData.all_info:type_name -> inbd.v1.AllInfo
	29, // 13: inbd.v1.FirmwareInfo.bios_release_date:type_name -> google.protobuf.Timestamp
	25, // 14: inbd.v1.SWBOMInfo.packages:type_name -> inbd.v1.SoftwarePackage
	29, // 15: inbd.v1.SWBOMInfo.collection_timestamp:type_name -> google.protobuf.Timestamp
	29, // 16: inbd.v1.SoftwarePackage.install_date:type_name -> google.protobuf.Timestamp
	29, // 17: inbd.v1.VersionInfo.build_date:type_name -> google.protobuf.Timestamp
	21, // 18: inbd.v1.AllInfo.hardware:type_name -> inbd.v1.HardwareInfo
	22, // 19: inbd.v1.AllInfo.firmware:type_name -> inbd.v1.FirmwareInfo
	23, // 20: inbd.v1.AllInfo.os_info:type_name -> inbd.v1.OSInfo
	26, // 21: inbd.v1.AllInfo.version:type_name -> inbd.v1.VersionInfo
	27, // 22: inbd.v1.AllInfo.power_capabilities:type_name -> inbd.v1.PowerCapabilitiesInfo
	24, // 23: inbd.v1.AllInfo.swbom:type_name -> inbd.v1.SWBOMInfo
	5,  // 24: inbd.v1.InbService.UpdateSystemSoftware:input_type -> inbd.v1.UpdateSystemSoftwareRequest
	6,  // 25: inbd.v1.InbService.UpdateOSSource:input_type -> inbd.v1.UpdateOSSourceRequest
	7,  // 26: inbd.v1.InbService.AddApplicationSource:input_type -> inbd.v1.AddApplicationSourceRequest
	8,  // 27: inbd.v1.InbService.RemoveApplicationSource:input_type -> inbd.v1.RemoveApplicationSourceRequest
	11, // 28: inbd.v1.InbService.LoadConfig:input_type -> inbd.v1.LoadConfigRequest
	12, // 29: inbd.v1.InbService.GetConfig:input_type -> inbd.v1.GetConfigRequest
	13, // 30: inbd.v1.InbService.SetConfig:input_type -> inbd.v1.SetConfigRequest
	14, // 31: inbd.v1.InbService.AppendConfig:input_type -> inbd.v1.AppendConfigRequest
	15, // 32: inbd.v1.InbService.RemoveConfig:input_type -> inbd.v1.RemoveConfigRequest
	4,  // 33: inbd.v1.InbService.UpdateFirmware:input_type -> inbd.v1.UpdateFirmwareRequest
	18, // 34: inbd.v1.InbService.Query:input_type -> inbd.v1.QueryRequest
	3,  // 35: inbd.v1.InbService.SetPowerState:input_type -> inbd.v1.SetPowerStateRequest
	9,  // 36: inbd.v1.InbService.UpdateSystemSoftware:output_type -> inbd.v1.UpdateResponse
	9,  // 37: inbd.v1.InbService.UpdateOSSource:output_type -> inbd.v1.UpdateResponse
	9,  // 38: inbd.v1.InbService.AddApplicationSource:output_type -> inbd.v1.UpdateResponse
	9,  // 39: inbd.v1.InbService.RemoveApplicationSource:output_type -> inbd.v1.UpdateResponse
	16, // 40: inbd.v1.InbService.LoadConfig:output_type -> inbd.v1.ConfigResponse
	17, // 41: inbd.v1.InbService.GetConfig:output_type -> inbd.v1.GetConfigResponse
	16, // 42: inbd.v1.InbService.SetConfig:output_type -> inbd.v1.ConfigResponse
	16, // 43: inbd.v1.InbService.AppendConfig:output_type -> inbd.v1.ConfigResponse
	16, // 44: inbd.v1.InbService.RemoveConfig:output_type -> inbd.v1.ConfigResponse
	9,  // 45: inbd.v1.InbService.UpdateFirmware:output_type -> inbd.v1.UpdateResponse
	19, // 46: inbd.v1.InbService.Query:output_type -> inbd.v1.QueryResponse
	10, // 47: inbd.v1.InbService.SetPowerState:output_type -> inbd.v1.SetPowerStateResponse
	36, // [36:48] is the sub-list for method output_type
	24, // [24:36] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_inbd_v1_inbd_proto_init() }
func file_inbd_v1_inbd_proto_init() {
	if File_inbd_v1_inbd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inbd_v1_inbd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPowerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFirmwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemSoftwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOSSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddApplicationSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveApplicationSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPowerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SWBOMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwarePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCapabilitiesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inbd_v1_inbd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_inbd_v1_inbd_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*QueryData_Hardware)(nil),
		(*QueryData_Firmware)(nil),
		(*QueryData_OsInfo)(nil),
		(*QueryData_Swbom)(nil),
		(*QueryData_Version)(nil),
		(*QueryData_AllInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inbd_v1_inbd_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inbd_v1_inbd_proto_goTypes,
		DependencyIndexes: file_inbd_v1_inbd_proto_depIdxs,
		EnumInfos:         file_inbd_v1_inbd_proto_enumTypes,
		MessageInfos:      file_inbd_v1_inbd_proto_msgTypes,
	}.Build()
	File_inbd_v1_inbd_proto = out.File
	file_inbd_v1_inbd_proto_rawDesc = nil
	file_inbd_v1_inbd_proto_goTypes = nil
	file_inbd_v1_inbd_proto_depIdxs = nil
}
